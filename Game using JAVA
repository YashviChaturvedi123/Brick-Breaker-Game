import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.io.*;

/**
 * Main Game Window for Brick Breaker
 * Initializes the GUI, game panel, score/lives display, and timer loop.
 */
public class BB extends JFrame implements ActionListener {

    private GamePanel game;           // Custom JPanel that handles game rendering and logic
    private javax.swing.Timer myTimer; // Timer to trigger game updates (every 10ms)

    JLabel bg, score, lives, level;   // HUD components

    public BB() {
        super("Brick Breaker");

        setLayout(null);
        setSize(800, 600); // Window size

        // Initialize and position the game panel
        game = new GamePanel();
        game.setSize(500, 500);
        game.setLocation(25, 25);
        add(game);

        // Set up font for HUD
        Font f = new Font("Bebas Neue", Font.PLAIN, 60);

        // Level label
        level = new JLabel("Level 1");
        level.setFont(f);
        level.setForeground(Color.WHITE);
        level.setSize(300, 100);
        level.setLocation(585, 50);
        add(level);

        // Score label
        score = new JLabel("Score: 0");
        score.setFont(f);
        score.setForeground(Color.WHITE);
        score.setSize(300, 100);
        score.setLocation(575, 150);
        add(score);

        // Lives label
        lives = new JLabel("Lives: 3");
        lives.setFont(f);
        lives.setForeground(Color.WHITE);
        lives.setSize(300, 100);
        lives.setLocation(580, 250);
        add(lives);

        // Background image
        bg = new JLabel(new ImageIcon("bbg.png"));
        bg.setSize(800, 600);
        add(bg);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);

        // Start game loop with a timer (fires every 10ms)
        myTimer = new javax.swing.Timer(10, this);
        myTimer.start();
    }

    // Called every 10ms: updates game logic and refreshes labels
    public void actionPerformed(ActionEvent e) {
        game.update(myTimer);
        score.setText("Score: " + game.getScore());
        lives.setText("Lives: " + game.getLives());
        level.setText("Level " + game.getLVL());
    }

    public static void main(String[] args) {
        new MainMenu(); // Launch main menu at startup
    }
}

/**
 * GamePanel is the main component where the game is played.
 * Handles drawing, keyboard input, collisions, and game logic.
 */
class GamePanel extends JPanel implements KeyListener {

    Brick[] bricks;                   // Array of bricks
    Paddle paddle;                   // Player-controlled paddle
    Ball ball;                       // Ball that bounces to hit bricks
    ArrayList<PowerUp> pUps;        // List of active power-ups

    boolean[] keys;                 // Keyboard input tracker
    boolean started;                // Game start state (ball moving or not)

    private int level, lives, score, left; // Game state variables

    public GamePanel() {
        super();
        ball = new Ball(245, 450);                // Initial ball position
        paddle = new Paddle(220, 475);            // Initial paddle position
        pUps = new ArrayList<PowerUp>();          // Initialize power-ups list
        bricks = load(1);                         // Load level 1 bricks

        keys = new boolean[2000];                 // Large enough for key codes
        started = false;
        lives = 3;
        score = 0;
        left = bricks.length;

        addKeyListener(this);                     // Listen for key inputs
        this.setFocusable(true);
        this.grabFocus();                         // Force keyboard focus
    }

    /**
     * Loads brick layout from a file and randomly assigns power-ups.
     */
    public Brick[] load(int lvl) {
        Scanner inFile = null;
        try {
            inFile = new Scanner(new BufferedReader(new FileReader("bricks" + (lvl - 1) + ".txt")));
        } catch (IOException ex) {
            System.out.println("File not available: " + ex);
            System.exit(0);
        }

        // Array of possible power-ups
        String[] p = {"", "", "", "", "", "", "", "", "", "", "", "", "", "shrink", "expand", "life", "life", "life", "fast", "slow"};
        Brick[] temp = new Brick[16];

        // Read positions from file and create bricks with random health and power-ups
        for (int i = 0; i < temp.length; i++) {
            int r = (int) (Math.random() * p.length);
            int hp = (int) (Math.random() * 3);
            Brick b = new Brick(inFile.nextInt(), inFile.nextInt(), hp + 1, p[r]);
            temp[i] = b;
            pUps.add(new PowerUp(b.getX(), b.getY(), p[r]));
        }

        return temp;
    }

    /**
     * Handles ball collision with walls, paddle, bricks, and power-ups.
     */
    private void checkContact() {
        // Wall collision
        if (ball.getX() + 10 >= 500 || ball.getX() <= 0) ball.setDX(-1 * ball.getDX());
        if (ball.getY() < 0) ball.setDY(-1 * ball.getDY());

        // Paddle collision
        if (ball.getY() + 10 >= paddle.getY() &&
            ball.getX() >= paddle.getX() && ball.getX() <= (paddle.getX() + paddle.getWidth())) {
            double ballPos = ball.getX() - paddle.getX();
            double newx = (ballPos / paddle.getWidth()) - .5;
            ball.setDX(newx * 5);  // Angle based on hit position
            ball.setDY(-1 * ball.getDY());
        }

        // Ball falls below paddle
        if (ball.getY() + 10 > paddle.getY() + 10) {
            lives--;
            reset(); // Reset ball and paddle position
        }

        // Brick collision
        for (Brick b : bricks) {
            if (ball.getX() + 10 >= b.getX() && ball.getX() <= b.getX() + 55 &&
                ball.getY() + 10 >= b.getY() && ball.getY() <= b.getY() + 20 &&
                b.getHP() > 0) {

                // Determine collision direction
                if (ball.getX() + 10 - ball.getDX() <= b.getX() ||
                    ball.getX() - ball.getDX() >= b.getX() + 55) {
                    ball.setDX(-1 * ball.getDX());
                } else {
                    ball.setDY(-1 * ball.getDY());
                }

                b.setHP(b.getHP() - 1); // Damage brick
                score += b.getHP() * 5; // Increase score
            }

            // Activate power-up when brick destroyed
            if (b.getHP() <= 0) {
                for (PowerUp p : pUps) {
                    if (p.getX() == b.getX() && p.getY() == b.getY()) {
                        p.setDY(3);
                        p.setAct(true);
                    }
                }
            }
        }

        // Power-up collection
        for (PowerUp p : pUps) {
            if ((p.getX() + 50 > paddle.getX() && p.getX() <= paddle.getX() + paddle.getWidth()) &&
                p.getY() + 20 >= paddle.getY() && p.getY() <= paddle.getY() + 10) {
                paddle.setpUp(p.getName());
                score += 50;
            }
        }

        // Check for level completion
        left = 0;
        for (Brick b : bricks) if (b.getHP() > 0) left++;

        if (left == 0) {
            level++;
            if (level > 3) {
                new MainMenu(); // Game completed
                setVisible(false);
            }
            reset();
        }

        // Game over
        if (lives <= 0) {
            new LoseFrame();
            setVisible(false);
        }
    }

    /**
     * Resets ball and paddle positions. Loads new level if needed.
     */
    public void reset() {
        ball.setX(245);
        ball.setY(460);
        ball.setDX(0);
        ball.setDY(0);
        paddle.setX(220);
        paddle.setY(475);
        score = 0;

        if (lives > 0) {
            pUps.clear();
            bricks = load(level + 1);
            score += 10;
        } else {
            new MainMenu();
            setVisible(false);
        }
        started = false;
    }

    // Handle key presses
    public void keyPressed(KeyEvent event) {
        int i = event.getKeyCode();
        keys[i] = true;
    }

    // Handle key releases
    public void keyReleased(KeyEvent evt) {
        int i = evt.getKeyCode();
        keys[i] = false;
    }

    public void keyTyped(KeyEvent evt) {}

    /**
     * Draw all game elements: bricks, power-ups, paddle, and ball.
     */
    public void paintComponent(Graphics g) {
        g.setColor(new Color(222, 222, 222));
        g.fillRect(0, 0, getWidth(), getHeight());

        for (Brick b : bricks) {
            if (b.getHP() > 0) g.drawImage(b.getImg(), b.getX(), b.getY(), this);
        }

        for (PowerUp p : pUps) {
            if (!p.getUse() && p.getAct()) {
                if (p.getY() < 550 && !p.getName().equals("")) {
                    g.drawImage(p.getImage(), p.getX(), p.getY(), this);
                }
            }
        }

        g.setColor(Color.BLACK);
        g.fillRect(paddle.getX(), paddle.getY(), paddle.getWidth(), 10); // Paddle
        g.drawImage(ball.getImage(), (int) ball.getX(), (int) ball.getY(), this); // Ball
    }

    /**
     * Updates game state: moves ball, paddle, checks collisions, power-up logic
     */
    public void update(javax.swing.Timer mT) {
        // Open help menu
        if (keys[KeyEvent.VK_H]) {
            mT.stop();
            new HelpFrame();
            setVisible(false);
        }

        // Return to main menu
        if (keys[KeyEvent.VK_M]) {
            mT.stop();
            new MainMenu();
            setVisible(false);
        }

        // Start game on SPACE
        if (!started) {
            if (keys[KeyEvent.VK_SPACE]) {
                int i = (int) (Math.random() * 6);
                ball.setDX(i);
                ball.setDY(-5);
                started = true;
            }
        } else {
            // Ongoing game updates
            checkContact();
            paddle.move(keys);
            paddle.powerUse(lives, ball);
            ball.move();

            for (PowerUp p : pUps) {
                p.move();
            }

            repaint(); // Trigger redraw
        }
    }

    // Accessors for HUD display
    public int getLVL() { return level; }
    public int getLives() { return lives; }
    public int getScore() { return score; }
}
